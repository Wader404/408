int ShortestPathMAX(AMGraph G,int v0)
{
    n = G.vexnum;
    for (v=0; v<n; ++v) {
        S[v] = false;
        D[v] = G.arcs[v0][v];
        if (D[v] == 0) D(v) = MaxInt;
        if (D[v] < MaxInt) Path[v] = v0;
        else Path[v] = -1;
    }
    S[v0] = true;
    D[v0] = 0;
    for (i = 1; i < n; ++i) {
        min = MaxInt;
        for (w = 0; w < n; ++w) {
            if (!S[w] && D[w] < min) {
                v = w;
                min = D[w];
            }
        }
    }
    S[v] = true;
    for (w = 0; w < n; ++w) {
        if (!S[w] && (D[v] + G.arcs[v][w] < D[w])) {
            D[w] = D[v] + G.arcs[v][w];
            Path[w] = v;
        }
    }
    Max = D[0];
    m = 0;
    for (i = 1; i < n; i++) {
        if (Max < D[i]) {
            m = i;
        }
    }
    return m;
}

